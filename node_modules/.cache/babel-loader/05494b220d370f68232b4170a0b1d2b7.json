{"ast":null,"code":"import * as React from 'react';\nimport { SpinnerIcon } from 'primereact/icons/spinner';\nimport { Ripple } from 'primereact/ripple';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, classNames, mergeProps, IconUtils } from 'primereact/utils';\nimport { ComponentBase } from 'primereact/componentbase';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar ButtonBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'Button',\n    badge: null,\n    badgeClassName: null,\n    className: null,\n    children: undefined,\n    disabled: false,\n    icon: null,\n    iconPos: 'left',\n    label: null,\n    link: false,\n    loading: false,\n    loadingIcon: null,\n    outlined: false,\n    raised: false,\n    rounded: false,\n    severity: null,\n    size: null,\n    text: false,\n    tooltip: null,\n    tooltipOptions: null,\n    visible: true\n  }\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var _classNames2;\n  var props = ButtonBase.getProps(inProps);\n  var _ButtonBase$setMetaDa = ButtonBase.setMetaData({\n      props: props\n    }),\n    ptm = _ButtonBase$setMetaDa.ptm;\n  var elementRef = React.useRef(ref);\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n  if (props.visible === false) {\n    return null;\n  }\n  var createIcon = function createIcon() {\n    var className = classNames('p-button-icon p-c', _defineProperty({}, \"p-button-icon-\".concat(props.iconPos), props.label));\n    var iconsProps = mergeProps({\n      className: className\n    }, ptm('icon'));\n    className = classNames(className, {\n      'p-button-loading-icon': props.loading\n    });\n    var loadingIconProps = mergeProps({\n      className: className\n    }, ptm('loadingIcon'));\n    var icon = props.loading ? props.loadingIcon || /*#__PURE__*/React.createElement(SpinnerIcon, _extends({}, loadingIconProps, {\n      spin: true\n    })) : props.icon;\n    return IconUtils.getJSXIcon(icon, _objectSpread({}, iconsProps), {\n      props: props\n    });\n  };\n  var createLabel = function createLabel() {\n    if (props.label) {\n      var labelProps = mergeProps({\n        className: 'p-button-label p-c'\n      }, ptm('label'));\n      return /*#__PURE__*/React.createElement(\"span\", labelProps, props.label);\n    }\n    return !props.children && !props.label && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-button-label p-c\",\n      dangerouslySetInnerHTML: {\n        __html: '&nbsp;'\n      }\n    });\n  };\n  var createBadge = function createBadge() {\n    if (props.badge) {\n      var badgeClassName = classNames('p-badge', props.badgeClassName);\n      var badgeProps = mergeProps({\n        className: badgeClassName\n      }, ptm('badge'));\n      return /*#__PURE__*/React.createElement(\"span\", badgeProps, props.badge);\n    }\n    return null;\n  };\n  var disabled = props.disabled || props.loading;\n  var showTooltip = !disabled || props.tooltipOptions && props.tooltipOptions.showOnDisabled;\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip) && showTooltip;\n  var sizeMapping = {\n    large: 'lg',\n    small: 'sm'\n  };\n  var size = sizeMapping[props.size];\n  var className = classNames('p-button p-component', props.className, (_classNames2 = {\n    'p-button-icon-only': (props.icon || props.loading) && !props.label && !props.children,\n    'p-button-vertical': (props.iconPos === 'top' || props.iconPos === 'bottom') && props.label,\n    'p-disabled': disabled,\n    'p-button-loading': props.loading,\n    'p-button-outlined': props.outlined,\n    'p-button-raised': props.raised,\n    'p-button-link': props.link,\n    'p-button-text': props.text,\n    'p-button-rounded': props.rounded,\n    'p-button-loading-label-only': props.loading && !props.icon && props.label\n  }, _defineProperty(_classNames2, \"p-button-loading-\".concat(props.iconPos), props.loading && props.label), _defineProperty(_classNames2, \"p-button-\".concat(size), size), _defineProperty(_classNames2, \"p-button-\".concat(props.severity), props.severity), _classNames2));\n  var icon = createIcon();\n  var label = createLabel();\n  var badge = createBadge();\n  var defaultAriaLabel = props.label ? props.label + (props.badge ? ' ' + props.badge : '') : props['aria-label'];\n  var rootProps = mergeProps({\n    ref: elementRef,\n    'aria-label': defaultAriaLabel,\n    className: className,\n    disabled: disabled\n  }, ButtonBase.getOtherProps(props), ptm('root'));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", rootProps, icon, label, props.children, badge, /*#__PURE__*/React.createElement(Ripple, null)), hasTooltip && /*#__PURE__*/React.createElement(Tooltip, _extends({\n    target: elementRef,\n    content: props.tooltip\n  }, props.tooltipOptions)));\n}));\nButton.displayName = 'Button';\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}