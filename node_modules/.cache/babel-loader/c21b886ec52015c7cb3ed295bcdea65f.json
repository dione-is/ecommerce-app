{"ast":null,"code":"import * as React from 'react';\nimport { localeOption } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Portal } from 'primereact/portal';\nimport { classNames, ObjectUtils, mergeProps, IconUtils } from 'primereact/utils';\nimport { ComponentBase } from 'primereact/componentbase';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar ConfirmDialogBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'ConfirmDialog',\n    tagKey: undefined,\n    visible: undefined,\n    message: null,\n    rejectLabel: null,\n    acceptLabel: null,\n    icon: null,\n    rejectIcon: null,\n    acceptIcon: null,\n    rejectClassName: null,\n    acceptClassName: null,\n    className: null,\n    appendTo: null,\n    footer: null,\n    breakpoints: null,\n    onHide: null,\n    accept: null,\n    reject: null,\n    children: undefined\n  }\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar confirmDialog = function confirmDialog() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  props = _objectSpread(_objectSpread({}, props), {\n    visible: props.visible === undefined ? true : props.visible\n  });\n  props.visible && OverlayService.emit('confirm-dialog', props);\n  var show = function show() {\n    var updatedProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    OverlayService.emit('confirm-dialog', _objectSpread(_objectSpread(_objectSpread({}, props), updatedProps), {\n      visible: true\n    }));\n  };\n  var hide = function hide() {\n    OverlayService.emit('confirm-dialog', {\n      visible: false\n    });\n  };\n  return {\n    show: show,\n    hide: hide\n  };\n};\nvar ConfirmDialog = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var props = ConfirmDialogBase.getProps(inProps);\n  var _React$useState = React.useState(props.visible),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    visibleState = _React$useState2[0],\n    setVisibleState = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    reshowState = _React$useState4[0],\n    setReshowState = _React$useState4[1];\n  var confirmProps = React.useRef(null);\n  var isCallbackExecuting = React.useRef(false);\n  var getCurrentProps = function getCurrentProps() {\n    return confirmProps.current || props;\n  };\n  var getPropValue = function getPropValue(key) {\n    return (confirmProps.current || props)[key];\n  };\n  var callbackFromProp = function callbackFromProp(key) {\n    for (var _len = arguments.length, param = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      param[_key - 1] = arguments[_key];\n    }\n    return ObjectUtils.getPropValue(getPropValue(key), param);\n  };\n  var acceptLabel = getPropValue('acceptLabel') || localeOption('accept');\n  var rejectLabel = getPropValue('rejectLabel') || localeOption('reject');\n  var _ConfirmDialogBase$se = ConfirmDialogBase.setMetaData({\n      props: props,\n      state: {\n        visible: visibleState\n      }\n    }),\n    ptm = _ConfirmDialogBase$se.ptm;\n  var accept = function accept() {\n    if (!isCallbackExecuting.current) {\n      isCallbackExecuting.current = true;\n      callbackFromProp('accept');\n      hide('accept');\n    }\n  };\n  var reject = function reject() {\n    if (!isCallbackExecuting.current) {\n      isCallbackExecuting.current = true;\n      callbackFromProp('reject');\n      hide('reject');\n    }\n  };\n  var show = function show() {\n    setVisibleState(true);\n    isCallbackExecuting.current = false;\n  };\n  var hide = function hide() {\n    var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cancel';\n    setVisibleState(false);\n    callbackFromProp('onHide', {\n      result: result\n    });\n  };\n  var confirm = function confirm(updatedProps) {\n    if (updatedProps.tagKey === props.tagKey) {\n      var isVisibleChanged = visibleState !== updatedProps.visible;\n      var targetChanged = getPropValue('target') !== updatedProps.target;\n      if (targetChanged && !props.target) {\n        hide();\n        confirmProps.current = updatedProps;\n        setReshowState(true);\n      } else if (isVisibleChanged) {\n        confirmProps.current = updatedProps;\n        updatedProps.visible ? show() : hide();\n      }\n    }\n  };\n  React.useEffect(function () {\n    props.visible ? show() : hide();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.visible]);\n  React.useEffect(function () {\n    if (!props.target && !props.message) {\n      OverlayService.on('confirm-dialog', confirm);\n    }\n    return function () {\n      OverlayService.off('confirm-dialog', confirm);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.target]);\n  useUpdateEffect(function () {\n    reshowState && show();\n  }, [reshowState]);\n  useUnmountEffect(function () {\n    OverlayService.off('confirm-dialog', confirm);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      confirm: confirm\n    };\n  });\n  var createFooter = function createFooter() {\n    var acceptClassName = classNames('p-confirm-dialog-accept', getPropValue('acceptClassName'));\n    var rejectClassName = classNames('p-confirm-dialog-reject', {\n      'p-button-text': !getPropValue('rejectClassName')\n    }, getPropValue('rejectClassName'));\n    var rejectButtonProps = mergeProps({\n      label: rejectLabel,\n      icon: getPropValue('rejectIcon'),\n      className: rejectClassName,\n      onClick: reject\n    }, ptm('rejectButton'));\n    var acceptButtonProps = mergeProps({\n      label: acceptLabel,\n      icon: getPropValue('acceptIcon'),\n      className: acceptClassName,\n      onClick: accept\n    }, ptm('acceptButton'));\n    var content = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, rejectButtonProps), /*#__PURE__*/React.createElement(Button, _extends({}, acceptButtonProps, {\n      autoFocus: true\n    })));\n    if (getPropValue('footer')) {\n      var defaultContentOptions = {\n        accept: accept,\n        reject: reject,\n        acceptClassName: acceptClassName,\n        rejectClassName: rejectClassName,\n        acceptLabel: acceptLabel,\n        rejectLabel: rejectLabel,\n        element: content,\n        props: getCurrentProps()\n      };\n      return ObjectUtils.getJSXElement(getPropValue('footer'), defaultContentOptions);\n    }\n    return content;\n  };\n  var createElement = function createElement() {\n    var currentProps = getCurrentProps();\n    var className = classNames('p-confirm-dialog', getPropValue('className'));\n    var message = ObjectUtils.getJSXElement(getPropValue('message'), currentProps);\n    var iconProps = mergeProps({\n      className: 'p-confirm-dialog-icon'\n    }, ptm('icon'));\n    var icon = IconUtils.getJSXIcon(getPropValue('icon'), _objectSpread({}, iconProps), {\n      props: currentProps\n    });\n    var footer = createFooter();\n    var messageProps = mergeProps({\n      className: 'p-confirm-dialog-message'\n    }, ptm('message'));\n    var rootProps = mergeProps({\n      visible: visibleState,\n      className: className,\n      footer: footer,\n      onHide: hide,\n      breakpoints: getPropValue('breakpoints'),\n      pt: currentProps.pt\n    }, ConfirmDialogBase.getOtherProps(currentProps));\n    return /*#__PURE__*/React.createElement(Dialog, rootProps, icon, /*#__PURE__*/React.createElement(\"span\", messageProps, message));\n  };\n  var element = createElement();\n  return /*#__PURE__*/React.createElement(Portal, {\n    element: element,\n    appendTo: getPropValue('appendTo')\n  });\n}));\nConfirmDialog.displayName = 'ConfirmDialog';\nexport { ConfirmDialog, confirmDialog };","map":null,"metadata":{},"sourceType":"module"}